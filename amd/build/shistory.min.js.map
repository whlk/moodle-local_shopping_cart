{"version":3,"file":"shistory.min.js","sources":["../src/shistory.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\r\n//\r\n// Moodle is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// Moodle is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU General Public License\r\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\n/*\r\n * @package    local_shopping_cart\r\n * @copyright  Wunderbyte GmbH <info@wunderbyte.at>\r\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\r\n */\r\n\r\nimport Ajax from 'core/ajax';\r\nimport Templates from 'core/templates';\r\n\r\nimport {updateTotalPrice, buttoninit} from 'local_shopping_cart/cart';\r\n\r\nimport {\r\n    get_string as getString,\r\n    get_strings as getStrings\r\n        }\r\n        from 'core/str';\r\nimport Notification from 'core/notification';\r\nimport ModalFactory from 'core/modal_factory';\r\nimport ModalEvents from 'core/modal_events';\r\nimport ModalForm from 'core_form/modalform';\r\n\r\nexport const init = () => {\r\n\r\n    const buttons = document.querySelectorAll(\"#shopping_cart-cashiers-section .shopping_cart_history_cancel_button\");\r\n\r\n    buttons.forEach(button => {\r\n\r\n        if (!button.dataset.initialized) {\r\n\r\n            if (button.dataset.canceled == true) {\r\n                setButtonToCanceled(button);\r\n            } else {\r\n                button.addEventListener('click', event => {\r\n\r\n                    event.preventDefault();\r\n                    event.stopPropagation();\r\n\r\n                    if (button.dataset.canceled == false) {\r\n                        // eslint-disable-next-line no-console\r\n                        console.log('button clicked');\r\n\r\n                        // confirmCancelModal(button);\r\n\r\n                        confirmCancelAndSetCreditModal(button);\r\n\r\n                    }\r\n\r\n                });\r\n            }\r\n            button.dataset.initialized = true;\r\n        }\r\n    });\r\n\r\n    const elements = document.querySelectorAll('button.shopping_cart_history_paidback_button');\r\n\r\n    elements.forEach(element => {\r\n\r\n        // eslint-disable-next-line no-console\r\n        console.log('initialize paid back', element);\r\n\r\n        if (!element.dataset.initialized) {\r\n            element.addEventListener('click', event => {\r\n\r\n                event.preventDefault();\r\n                event.stopPropagation();\r\n\r\n                 // eslint-disable-next-line no-console\r\n                 console.log('button clicked');\r\n                 confirmPaidBackModal(element);\r\n            });\r\n            element.dataset.initialized = true;\r\n        }\r\n    });\r\n};\r\n\r\n/**\r\n * This triggers the ajax call to acutally cancel the purchase.\r\n * @param {int} itemid\r\n * @param {int} userid\r\n * @param {string} componentname\r\n * @param {int} historyid\r\n * @param {string} currency\r\n * @param {string} price\r\n * @param {string} credit\r\n * @param {type} button\r\n */\r\nfunction cancelPurchase(itemid, userid, componentname, historyid, currency, price, credit, button) {\r\n\r\n    // eslint-disable-next-line no-console\r\n    console.log('button clicked', historyid);\r\n\r\n    Ajax.call([{\r\n        methodname: \"local_shopping_cart_cancel_purchase\",\r\n        args: {\r\n            'itemid': itemid,\r\n            'componentname': componentname,\r\n            'userid': userid,\r\n            'historyid': historyid,\r\n            'credit': credit\r\n        },\r\n        done: function(data) {\r\n\r\n            // eslint-disable-next-line no-console\r\n            console.log(data);\r\n\r\n            if (data.success == 1) {\r\n\r\n                getString('cancelsuccess', 'local_shopping_cart').then(message => {\r\n\r\n                    Notification.addNotification({\r\n                        message,\r\n                        type: \"success\"\r\n                    });\r\n\r\n                    setTimeout(() => {\r\n                        let notificationslist = document.querySelectorAll('#user-notifications div.alert');\r\n                        const notificatonelement = notificationslist[notificationslist.length - 1];\r\n                        notificatonelement.remove();\r\n                    }, 5000);\r\n\r\n                    return;\r\n                }).catch(e => {\r\n                    // eslint-disable-next-line no-console\r\n                    console.log(e);\r\n                });\r\n\r\n                // eslint-disable-next-line no-console\r\n                console.log('data returned', data.success);\r\n                setButtonToCanceled(button);\r\n\r\n                showCredit(data.credit, currency, userid);\r\n\r\n                // Make sure addtocartbutton active againe once the item is removed from the shopping cart.\r\n                const addtocartbutton = document.querySelector('#btn-' + componentname + '-' + itemid);\r\n\r\n                // If there is not addtocartbutton, we have to add it anew.\r\n                if (!addtocartbutton) {\r\n\r\n                    data.itemid = itemid;\r\n                    data.componentname = componentname;\r\n                    data.price = price;\r\n\r\n                    Templates.renderForPromise('local_shopping_cart/addtocartdb', data).then(({html}) => {\r\n\r\n                        // Get parentelement.\r\n                        let parent = document.querySelector('span.price_' + componentname + \"_\" + itemid);\r\n                        parent.textContent = price + \" \" + currency;\r\n\r\n                        if (parent) {\r\n                            parent.insertAdjacentHTML('beforeend', html);\r\n                        }\r\n\r\n                        buttoninit(itemid, componentname);\r\n                        return true;\r\n                    }).catch((e) => {\r\n                        // eslint-disable-next-line no-console\r\n                        console.log(e);\r\n                    });\r\n                } else {\r\n                     // eslint-disable-next-line no-console\r\n                     console.log(addtocartbutton);\r\n                     addtocartbutton.classList.remove('disabled');\r\n                     addtocartbutton.dataset.initialized = false;\r\n                     buttoninit(itemid, componentname);\r\n                }\r\n\r\n            } else {\r\n                getString('canceldidntwork', 'local_shopping_cart').then(message => {\r\n\r\n                    Notification.addNotification({\r\n                        message,\r\n                        type: \"danger\"\r\n                    });\r\n\r\n                    setTimeout(() => {\r\n                        let notificationslist = document.querySelectorAll('#user-notifications div.alert');\r\n                        const notificatonelement = notificationslist[notificationslist.length - 1];\r\n                        notificatonelement.remove();\r\n                    }, 5000);\r\n\r\n                    return;\r\n                }).catch(e => {\r\n                    // eslint-disable-next-line no-console\r\n                    console.log(e);\r\n                });\r\n            }\r\n\r\n        },\r\n        fail: function(ex) {\r\n            // eslint-disable-next-line no-console\r\n            console.log(\"ex:\" + ex);\r\n        },\r\n    }]);\r\n\r\n}\r\n\r\n/**\r\n * Function to change classes and text of button.\r\n * @param {*} button\r\n */\r\nfunction setButtonToCanceled(button) {\r\n\r\n    button.classList.add('disabled');\r\n    button.classList.remove('btn-primary');\r\n    button.classList.add('btn-danger');\r\n    button.dataset.canceled = true;\r\n\r\n    getString('canceled', 'local_shopping_cart').then(result => {\r\n        // eslint-disable-next-line no-console\r\n        console.log(result);\r\n\r\n        button.innerText = result;\r\n        return;\r\n    }).catch(e => {\r\n        // eslint-disable-next-line no-console\r\n        console.log(e);\r\n    });\r\n}\r\n\r\n/**\r\n *\r\n * @param {string} credit\r\n * @param {string} currency\r\n * @param {int} userid\r\n */\r\nfunction showCredit(credit, currency, userid) {\r\n\r\n    let creditelement = document.querySelector('li.shopping_cart_history_paidback');\r\n\r\n    if (creditelement) {\r\n        creditelement.classList.remove('hidden');\r\n\r\n        let credittotalelement = creditelement.querySelector('span.credit_total');\r\n\r\n        credittotalelement.textContent = credit;\r\n\r\n    } else {\r\n\r\n        let data = {\r\n            'currency': currency,\r\n            'credit': credit,\r\n            'userid': userid\r\n        };\r\n\r\n        Templates.renderForPromise('local_shopping_cart/credit_item', data).then(({html}) => {\r\n\r\n            // Get parentelement.\r\n            let parent = document.querySelector('ul.cachier-history-items');\r\n\r\n            parent.insertAdjacentHTML('afterbegin', html);\r\n\r\n            // We rerun init after insert, to make sure we have the right value.\r\n            init();\r\n            return true;\r\n        }).catch((e) => {\r\n            // eslint-disable-next-line no-console\r\n            console.log(e);\r\n        });\r\n    }\r\n    // We also need to call the udpateTotalPrice function from this place to make sure everything is uptodate.\r\n    updateTotalPrice();\r\n}\r\n\r\n/**\r\n *\r\n * @param {*} element\r\n */\r\nfunction confirmPaidBack(element) {\r\n    const userid = element.dataset.userid;\r\n    Ajax.call([{\r\n        methodname: \"local_shopping_cart_credit_paid_back\",\r\n        args: {\r\n            userid\r\n        },\r\n        done: function(data) {\r\n\r\n            // eslint-disable-next-line no-console\r\n            console.log(data, userid);\r\n\r\n            let creditelement = document.querySelector('.credit_total');\r\n\r\n            creditelement.textContent = 0;\r\n\r\n            // We hide the creditelement once we have paid back everything.\r\n            let licreditelement = document.querySelector('.shopping_cart_history_paidback');\r\n            licreditelement.classList.add('hidden');\r\n\r\n            Notification.addNotification({\r\n                message: \"Credit paid back\",\r\n                type: \"success\"\r\n            });\r\n            setTimeout(() => {\r\n                let notificationslist = document.querySelectorAll('#user-notifications div.alert.alert-success');\r\n                const notificatonelement = notificationslist[notificationslist.length - 1];\r\n                notificatonelement.remove();\r\n            }, 5000);\r\n\r\n             // We also need to call the udpateTotalPrice function from this place to make sure everything is uptodate.\r\n            updateTotalPrice();\r\n            return;\r\n        },\r\n        fail: function(ex) {\r\n        // eslint-disable-next-line no-console\r\n        console.log(\"ex:\" + ex);\r\n        },\r\n    }]);\r\n}\r\n\r\n// /**\r\n//  *\r\n//  * @param {*} button\r\n//  */\r\n// function confirmCancelModal(button) {\r\n\r\n//     getStrings([\r\n//             {key: 'confirmcanceltitle', component: 'local_shopping_cart'},\r\n//             {key: 'confirmcancelbody', component: 'local_shopping_cart'},\r\n//             {key: 'cancelpurchase', component: 'local_shopping_cart'}\r\n//         ]\r\n//         ).then(strings => {\r\n\r\n//             ModalFactory.create({type: ModalFactory.types.SAVE_CANCEL}).then(modal => {\r\n\r\n//                 modal.setTitle(strings[0]);\r\n//                     modal.setBody(strings[1]);\r\n//                     modal.setSaveButtonText(strings[2]);\r\n//                     modal.getRoot().on(ModalEvents.save, function() {\r\n\r\n//                         // eslint-disable-next-line no-console\r\n//                         console.log('we saved');\r\n\r\n//                         const historyid = button.dataset.historyid;\r\n//                         const itemid = button.dataset.itemid;\r\n//                         const userid = button.dataset.userid;\r\n//                         const currency = button.dataset.currency;\r\n//                         const componentname = button.dataset.componentname;\r\n//                         const price = button.dataset.price;\r\n\r\n//                         cancelPurchase(itemid, userid, componentname, historyid, currency, price, button);\r\n//                     });\r\n\r\n//                     modal.show();\r\n//                     return modal;\r\n//             }).catch(e => {\r\n//                 // eslint-disable-next-line no-console\r\n//                 console.log(e);\r\n//             });\r\n//             return true;\r\n//         }).catch(e => {\r\n//             // eslint-disable-next-line no-console\r\n//             console.log(e);\r\n//         });\r\n// }\r\n\r\n/**\r\n *\r\n * @param {*} button\r\n */\r\nfunction confirmCancelAndSetCreditModal(button) {\r\n\r\n    const price = button.dataset.price;\r\n\r\n    const modalForm = new ModalForm({\r\n\r\n        // Name of the class where form is defined (must extend \\core_form\\dynamic_form):\r\n        formClass: \"local_shopping_cart\\\\form\\\\modal_cancel_addcredit\",\r\n        // Add as many arguments as you need, they will be passed to the form:\r\n        args: {'credit': price},\r\n        // Pass any configuration settings to the modal dialogue, for example, the title:\r\n        modalConfig: {title: getString('confirmcanceltitle', 'local_shopping_cart')},\r\n        // DOM element that should get the focus after the modal dialogue is closed:\r\n        returnFocus: button,\r\n    });\r\n    // Listen to events if you want to execute something on form submit.\r\n    // Event detail will contain everything the process() function returned:\r\n    modalForm.addEventListener(modalForm.events.FORM_SUBMITTED, (e) => {\r\n        window.console.log(e.detail);\r\n\r\n        const historyid = button.dataset.historyid;\r\n        const itemid = button.dataset.itemid;\r\n        const userid = button.dataset.userid;\r\n        const currency = button.dataset.currency;\r\n        const componentname = button.dataset.componentname;\r\n\r\n        const credit = e.detail.credit ?? \"\";\r\n\r\n        cancelPurchase(itemid, userid, componentname, historyid, currency, price, credit, button);\r\n    });\r\n\r\n    // Show the form.\r\n    modalForm.show();\r\n}\r\n\r\n/**\r\n *\r\n * @param {*} element\r\n */\r\nfunction confirmPaidBackModal(element) {\r\n\r\n    getStrings([\r\n        {key: 'confirmpaidbacktitle', component: 'local_shopping_cart'},\r\n        {key: 'confirmpaidbackbody', component: 'local_shopping_cart'},\r\n        {key: 'confirmpaidback', component: 'local_shopping_cart'}\r\n    ]\r\n    ).then(strings => {\r\n\r\n        ModalFactory.create({type: ModalFactory.types.SAVE_CANCEL}).then(modal => {\r\n\r\n            modal.setTitle(strings[0]);\r\n                modal.setBody(strings[1]);\r\n                modal.setSaveButtonText(strings[2]);\r\n                modal.getRoot().on(ModalEvents.save, function() {\r\n\r\n                    // eslint-disable-next-line no-console\r\n                    console.log('we saved');\r\n\r\n                    confirmPaidBack(element);\r\n                });\r\n\r\n                modal.show();\r\n                return modal;\r\n        }).catch(e => {\r\n            // eslint-disable-next-line no-console\r\n            console.log(e);\r\n        });\r\n        return true;\r\n    }).catch(e => {\r\n        // eslint-disable-next-line no-console\r\n        console.log(e);\r\n    });\r\n}"],"names":["init","document","querySelectorAll","forEach","button","dataset","initialized","canceled","setButtonToCanceled","addEventListener","event","preventDefault","stopPropagation","console","log","price","modalForm","ModalForm","formClass","args","modalConfig","title","returnFocus","events","FORM_SUBMITTED","e","window","detail","historyid","itemid","userid","currency","componentname","credit","call","methodname","done","data","success","then","message","addNotification","type","setTimeout","notificationslist","length","remove","catch","creditelement","querySelector","classList","textContent","renderForPromise","_ref2","html","insertAdjacentHTML","showCredit","addtocartbutton","_ref","parent","fail","ex","cancelPurchase","show","confirmCancelAndSetCreditModal","element","key","component","strings","create","ModalFactory","types","SAVE_CANCEL","modal","setTitle","setBody","setSaveButtonText","getRoot","on","ModalEvents","save","add","confirmPaidBack","confirmPaidBackModal","result","innerText"],"mappings":"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"}